`Use strict`;

const foo = () =>
{
    /* цикл for создает блочную область видимость,
     которая ограничивает область видимости для let и const.
     После завершения цикла, эти переменные недоступны.
     */
    for (let i = 0; i < 5; i++) {
       var a = 5; /* Переменная не ограничивается блочной областью видимости.
       И будет доступна после завершения цикла. В функциональной области видимости.*/
       let b = 6;
       const c = 7;
       console.log(c); /* Вывод в консоль const c сработает.
     Так как выводим значение в консоль внутри блочной области видимости.
      Этот консоль лог сработает первым.*/
    };

    console.log(a); /* Вывод результата - 5,
    но только в том случае, если перед выводом var a в консоль нет ошибок прерывающих функцию.
    Если поменять виводы или визовы переменных местами, var a - не сработает.*/
    console.log(b); /* При попытке вывести в консоль переменную b, потому что она объявлена внутри цикла,
    то-есть в блочной области видимости. Вне блока переменной не существует.*/
    console.log(c); /* const c, тоже недоступна вне блока. */
};

foo();

/* Что касается последовательности выполнения console.log:
   Когда создается функция foo, ее контекст выполнения добавляется в стек вызовов.
   Внутри функции начинает выполняться цикл, который поднимается на вершину стека вызовов.
   Это означает, что все, что находится внутри цикла, будет выполнено первым, перед тем, что находится внутри функции.
   Поэтому console.log(c) внутри блока будет показан первым.
   Когда контекст выполнения цикла завершится, он будет удален, что предотвратит доступ к переменным b и c за пределами блока.
   Затем начнет выполняться console.log(a) внутри функции, если только не произойдет ошибка, которая прервет выполнение функции до ее вывода на консоль.
   Поскольку var доступна в функциональной области видимости, к ней нельзя получить доступ после завершения функции.

   Результат:
   1. console.log(c) - 7
   2. console.log(a) - 5
   Остальные console.log с ошибками.
 */
